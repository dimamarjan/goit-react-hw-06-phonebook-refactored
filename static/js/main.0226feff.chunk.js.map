{"version":3,"sources":["redux/slices/items.js","redux/slices/filter.js","redux/store/store.js","components/ContactForm/ContactForm.style.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.style.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.style.jsx","views/ContactListView.style.jsx","views/ContactListView.jsx","components/ContactList/ContactList.jsx","App.js","reportWebVitals.js","index.js"],"names":["itemsSlice","createSlice","name","initialState","reducers","addContact","state","action","payload","delContact","filter","contact","id","actions","filterSlice","filterUpdate","rootReducer","items","store","configureStore","reducer","devTools","process","FormPhoneBook","styled","form","LabelForm","label","LabelText","span","InputForm","input","SubmitButton","button","ContactForm","dispatch","useDispatch","contactsArr","useSelector","useState","newContactsArr","setNewContactsArr","contactForm","nameContact","numberContact","target","contactItem","nanoid","toLowerCase","number","elements","value","useEffect","onSubmit","e","preventDefault","length","namesArr","map","i","numberArr","includes","newContact","type","pattern","title","required","LabelContacts","LabelContactsText","AccentText","InputContacts","Filter","onChange","ContactListSection","ul","ContactListItem","li","ContactItemText","DelContactButton","ContactListView","data","onDelete","onClick","ContactList","filterData","filteredArr","setFilteredArr","dataToDelete","setDataToDelete","showFilteredList","setShowFilteredList","showList","setShoList","onDeleteHeandler","toString","indexOf","parseInt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAEMA,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,GACdC,SAAU,CACNC,WAAY,SAACC,EAAOC,GAAR,4BAAuBD,GAAvB,CAA8BC,EAAOC,WACjDC,WAAY,SAACH,EAAOC,GAAR,OAAmBD,EAAMI,QAAO,SAAAC,GAAO,OAAIA,EAAQC,KAAOL,EAAOC,eAI9E,EAAmCR,EAAWa,QAAtCR,EAAR,EAAQA,WAAYI,EAApB,EAAoBA,WACZT,IAAf,QCVMc,EAAcb,YAAY,CAC5BC,KAAM,SACNC,aAAc,GACdC,SAAU,CACNW,aAAc,SAACT,EAAOC,GAAR,OAAmBA,EAAOC,YAIjCO,EAAiBD,EAAYD,QAA7BE,aCNTC,EAAc,CAChBC,QACAP,ODKWI,EAAf,SCGeI,EALDC,YAAe,CACzBC,QAASJ,EACTK,UAAUC,I,6BCTDC,EAAgBC,IAAOC,KAAV,2HASbC,EAAYF,IAAOG,MAAV,uFAMTC,EAAYJ,IAAOK,KAAV,iDAITC,EAAYN,IAAOO,MAAV,iEAKTC,EAAeR,IAAOS,OAAV,0B,eCXlB,SAASC,IACZ,IAAMC,EAAWC,cACXC,EAAcC,aAAY,SAACpB,GAAD,OAAWA,EAAMD,SACjD,EAA4CsB,qBAA5C,mBAAOC,EAAP,KAAuBC,EAAvB,KAGMC,EAAc,SAACC,EAAaC,EAAd,GAA4C,IAAdC,EAAa,EAAbA,OACxCC,EAAc,CAChBlC,GAAImC,cACJ7C,KAAMyC,EAAYK,cAClBC,OAAQL,GAIZ,OAFAC,EAAOK,SAAShD,KAAKiD,MAAQ,GAC7BN,EAAOK,SAASD,OAAOE,MAAQ,GACxBL,GA+BX,OANAM,qBAAU,WACFZ,GACAL,EAAS9B,EAAWmC,MAE1B,CAACL,EAAUK,IAGT,8BACI,eAACjB,EAAD,CAAe8B,SA7BA,SAACC,GACpBA,EAAEC,iBACF,IAAMrD,EAAOoD,EAAET,OAAOK,SAAShD,KAAKiD,MAC9BF,EAASK,EAAET,OAAOK,SAASD,OAAOE,MACxC,GAA2B,IAAvBd,EAAYmB,OAAc,CAC1B,IAAMC,EAAWpB,EAAYqB,KAAI,SAAAC,GAAC,OAAIA,EAAEzD,QAClC0D,EAAYvB,EAAYqB,KAAI,SAAAC,GAAC,OAAIA,EAAEV,UACzC,GAAIQ,EAASI,SAAS3D,EAAK8C,gBAAkBY,EAAUC,SAASZ,GAG5D,OAFAK,EAAET,OAAOK,SAAShD,KAAKiD,MAAQ,QAC/BG,EAAET,OAAOK,SAASD,OAAOE,MAAQ,IAGjC,IAAMW,EAAapB,EAAYxC,EAAM+C,EAAQK,GAC7Cb,EAAkBqB,OAEnB,CACH,IAAMA,EAAapB,EAAYxC,EAAM+C,EAAQK,GAC7Cb,EAAkBqB,KAYlB,UACI,eAACpC,EAAD,WACI,cAACE,EAAD,mBACA,cAACE,EAAD,CACIiC,KAAK,OACL7D,KAAK,OACL8D,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGhB,eAACxC,EAAD,WACI,cAACE,EAAD,qBACA,cAACE,EAAD,CACIiC,KAAK,MACL7D,KAAK,SACL8D,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGhB,cAAClC,EAAD,+BCjFT,I,QAAMmC,EAAgB3C,IAAOG,MAAV,2GAObyC,EAAoB5C,IAAOK,KAAV,kDAIjBwC,EAAa7C,IAAOK,KAAV,4EAKVyC,EAAgB9C,IAAOO,MAAV,2CCPnB,SAASwC,IACZ,IAAMpC,EAAWC,cAOjB,OACI,8BACI,eAAC+B,EAAD,WACI,eAACC,EAAD,+BAAoC,cAACC,EAAD,mBAApC,OAAqE,cAACA,EAAD,wBACrE,cAACC,EAAD,CACIpE,KAAK,SACLsE,SAVO,SAAC,GAAgB,IAAd3B,EAAa,EAAbA,OACtBV,EAASpB,EAAa8B,EAAOM,gBCd9B,I,MAAMsB,EAAqBjD,IAAOkD,GAAV,gDCAlBC,GDIkBnD,IAAOoD,GAAV,0GAOGpD,IAAOK,KAAV,0BAEIL,IAAOS,OAAV,gDCbET,IAAOoD,GAAV,2GAOfC,EAAkBrD,IAAOK,KAAV,0BAEfiD,GAAmBtD,IAAOS,OAAV,gDCLtB,SAAS8C,GAAT,GAA6C,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,SAC5BrE,EAAqBoE,EAArBpE,GAAIV,EAAiB8E,EAAjB9E,KAAM+C,EAAW+B,EAAX/B,OAElB,OACI,eAAC,EAAD,WACI,eAAC,EAAD,WAAkB/C,EAAlB,KAA0B+C,KAC1B,cAAC,GAAD,CACIrC,GAAIA,EACJsE,QAASD,EAFb,uBCHL,SAASE,KACZ,IAAMjE,EAAQoB,aAAY,SAAApB,GAAK,OAAIA,EAAMD,SACnCmE,EAAa9C,aAAY,SAAApB,GAAK,OAAIA,EAAMR,UACxCyB,EAAWC,cACjB,EAAsCG,mBAAS,IAA/C,mBAAO8C,EAAP,KAAoBC,EAApB,KACA,EAAwC/C,qBAAxC,mBAAOgD,EAAP,KAAqBC,EAArB,KAEA,EAAgDjD,oBAAS,GAAzD,mBAAOkD,EAAP,KAAyBC,EAAzB,KACA,EAA+BnD,oBAAS,GAAxC,mBAAOoD,EAAP,KAAiBC,EAAjB,KAEMC,EAAmB,SAAC,GAAgB,IAAdhD,EAAa,EAAbA,OACxB2C,EAAgB3C,EAAOjC,KA6C3B,OAzCAwC,qBAAU,WACFgC,GACIU,SAASV,IACTE,EAAe,YACRpE,EAAMR,QAAQ,SAAAC,GACb,OAAOA,EAAQT,KAAK6F,QAAQX,IAAe,OAInDY,SAASZ,IACTE,EAAe,YACRpE,EAAMR,QAAQ,SAAAC,GACb,OAAOA,EAAQsC,OAAO8C,QAAQX,IAAe,QAMzDE,EAAe,MAEpB,CAACF,EAAYlE,IAGhBkC,qBAAU,WACqB,IAAvBiC,EAAY7B,QACZoC,GAAW,GACXF,GAAoB,KAEpBA,GAAoB,GACpBE,GAAW,MAEhB,CAACP,EAAY7B,SAGhBJ,qBAAU,WACFmC,GACApD,EAAS1B,EAAW8E,MAEzB,CAACA,EAAcpD,IAId,8BACI,eAACsC,EAAD,WACKkB,GAAYzE,EAAMwC,KAAI,SAACZ,GAAD,OACnB,cAACiC,GAAD,CAAsCC,KAAMlC,EAAamC,SAAUY,GAA7C/C,EAAYlC,OAErC6E,GAAoBJ,EAAY3B,KAAI,SAACZ,GAAD,OACjC,cAACiC,GAAD,CAAsCC,KAAMlC,EAAamC,SAAUY,GAA7C/C,EAAYlC,YCvDvCqF,OAbf,WAEE,OACE,gCACE,2CACA,cAAC/D,EAAD,IACA,0CACA,cAACqC,EAAD,IACA,cAACY,GAAD,QCASe,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU3F,MAAOA,EAAjB,SACE,cAAC,GAAD,QAGJ4F,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.0226feff.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst itemsSlice = createSlice({\n    name: 'items',\n    initialState: [],\n    reducers: {\n        addContact: (state, action) => [...state, action.payload],\n        delContact: (state, action) => state.filter(contact => contact.id !== action.payload)\n    },\n});\n\nexport const { addContact, delContact } = itemsSlice.actions;\nexport default itemsSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst filterSlice = createSlice({\n    name: 'filter',\n    initialState: \"\",\n    reducers: {\n        filterUpdate: (state, action) => action.payload\n    },\n});\n\nexport const { filterUpdate } = filterSlice.actions;\nexport default filterSlice.reducer;","import { configureStore } from '@reduxjs/toolkit'\r\nimport items from 'redux/slices/items'\r\nimport filter from 'redux/slices/filter'\r\n\r\nconst rootReducer = {\r\n    items,\r\n    filter\r\n}\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    devTools: process.env.NODE_ENV !== \"production\"\r\n})\r\n\r\nexport default store;","import styled from \"@emotion/styled\";\r\n\r\nexport const FormPhoneBook = styled.form`\r\ndisplay: block;\r\nwidth: 320px;\r\nborder: 2px solid black;\r\npadding: 10px;\r\n\r\nmargin-left: 5px;\r\n`;\r\n\r\nexport const LabelForm = styled.label`\r\ndisplay: flex;\r\nflex-direction: column;\r\nfont-size: 20px;\r\n`;\r\n\r\nexport const LabelText = styled.span`\r\nmargin-bottom: 5px;\r\n`;\r\n\r\nexport const InputForm = styled.input`\r\nwidth: 150px;\r\nmargin-bottom: 20px;\r\n`;\r\n\r\nexport const SubmitButton = styled.button``;\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport {\r\n    FormPhoneBook,\r\n    LabelForm,\r\n    LabelText,\r\n    InputForm,\r\n    SubmitButton\r\n} from 'components/ContactForm/ContactForm.style'\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport { addContact } from 'redux/slices/items';\r\nimport { nanoid } from 'nanoid'\r\n\r\n\r\n\r\n\r\nexport function ContactForm() {\r\n    const dispatch = useDispatch();\r\n    const contactsArr = useSelector((store) => store.items)\r\n    const [newContactsArr, setNewContactsArr] = useState();\r\n\r\n\r\n    const contactForm = (nameContact, numberContact, {target} ) => {\r\n        const contactItem = {\r\n            id: nanoid(),\r\n            name: nameContact.toLowerCase(),\r\n            number: numberContact\r\n        };\r\n        target.elements.name.value = \"\";\r\n        target.elements.number.value = \"\";\r\n        return contactItem;\r\n    }\r\n\r\n    \r\n    const onSubmitHandle = (e) => {\r\n        e.preventDefault();\r\n        const name = e.target.elements.name.value;\r\n        const number = e.target.elements.number.value;\r\n        if (contactsArr.length !== 0) {\r\n            const namesArr = contactsArr.map(i => i.name);\r\n            const numberArr = contactsArr.map(i => i.number);\r\n            if (namesArr.includes(name.toLowerCase()) || numberArr.includes(number)) {\r\n                e.target.elements.name.value = \"\";\r\n                e.target.elements.number.value = \"\";\r\n                return;\r\n            } else {\r\n                const newContact = contactForm(name, number, e)\r\n                setNewContactsArr(newContact);\r\n            };\r\n        } else {\r\n            const newContact = contactForm(name, number, e)\r\n            setNewContactsArr(newContact);\r\n        };\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (newContactsArr) {\r\n            dispatch(addContact(newContactsArr));\r\n        }\r\n    },[dispatch, newContactsArr])\r\n\r\n    return (\r\n        <div>\r\n            <FormPhoneBook onSubmit={onSubmitHandle}>\r\n                <LabelForm>\r\n                    <LabelText>Name</LabelText>\r\n                    <InputForm\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required>\r\n                    </InputForm>\r\n                </LabelForm>\r\n                <LabelForm>\r\n                    <LabelText>Number</LabelText>\r\n                    <InputForm\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required>\r\n                    </InputForm>\r\n                </LabelForm>\r\n                <SubmitButton>Add contact</SubmitButton>\r\n            </FormPhoneBook>\r\n        </div>\r\n    );\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const LabelContacts = styled.label`\r\ndisplay: flex;\r\nflex-direction: column;\r\nfont-size: 20px;\r\nmargin-left: 15px;\r\n`;\r\n\r\nexport const LabelContactsText = styled.span`\r\nmargin-bottom: 10px;\r\n`;\r\n\r\nexport const AccentText = styled.span`\r\ntext-decoration: underline;\r\nfont-weight: 600;\r\n`;\r\n\r\nexport const InputContacts = styled.input`\r\nwidth: 150px;\r\n`;","import {\r\n    LabelContacts,\r\n    LabelContactsText,\r\n    InputContacts,\r\n    AccentText\r\n} from \"components/Filter/Filter.style\"\r\nimport { useDispatch } from 'react-redux';\r\nimport { filterUpdate } from 'redux/slices/filter';\r\n\r\n\r\n\r\nexport function Filter() {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const onChangeHandle = ({ target }) => {\r\n        dispatch(filterUpdate(target.value))\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <LabelContacts>\r\n                <LabelContactsText>Find contacts by <AccentText>name</AccentText> or <AccentText>number</AccentText></LabelContactsText>\r\n                <InputContacts\r\n                    name=\"filter\"\r\n                    onChange={onChangeHandle} />\r\n            </LabelContacts>\r\n        </div>\r\n    );\r\n}\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const ContactListSection = styled.ul`\r\nmargin-left: 15px;\r\n`;\r\n\r\nexport const ContactListItem = styled.li`\r\ntext-transform: capitalize;\r\n:not(:last-child){\r\n    margin-bottom: 15px;\r\n}\r\n`;\r\n\r\nexport const ContactItemText = styled.span``;\r\n\r\nexport const DelContactButton = styled.button`\r\nmargin-left: 10px;\r\n`;","import styled from \"@emotion/styled\";\r\n\r\nexport const ContactListItem = styled.li`\r\ntext-transform: capitalize;\r\n:not(:last-child){\r\n    margin-bottom: 15px;\r\n}\r\n`;\r\n\r\nexport const ContactItemText = styled.span``;\r\n\r\nexport const DelContactButton = styled.button`\r\nmargin-left: 10px;\r\n`;","import {\r\n    ContactListItem,\r\n    ContactItemText,\r\n    DelContactButton\r\n} from 'views/ContactListView.style'\r\n\r\nexport function ContactListView( {data, onDelete}) {\r\n    const { id, name, number } = data;\r\n    \r\n    return (\r\n        <ContactListItem >\r\n            <ContactItemText>{name}: {number}</ContactItemText>\r\n            <DelContactButton\r\n                id={id}\r\n                onClick={onDelete}\r\n            >\r\n                Delete\r\n            </DelContactButton>\r\n        </ContactListItem>\r\n    )\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { delContact } from 'redux/slices/items';\r\n\r\n\r\nimport { ContactListSection } from 'components/ContactList/ContactList.style'\r\nimport { ContactListView } from 'views/ContactListView';\r\n\r\nexport function ContactList() {\r\n    const store = useSelector(store => store.items);\r\n    const filterData = useSelector(store => store.filter);\r\n    const dispatch = useDispatch();\r\n    const [filteredArr, setFilteredArr] = useState([]);\r\n    const [dataToDelete, setDataToDelete] = useState();\r\n\r\n    const [showFilteredList, setShowFilteredList] = useState(false);\r\n    const [showList, setShoList] = useState(false);\r\n\r\n    const onDeleteHeandler = ({ target }) => {\r\n        setDataToDelete(target.id);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if (filterData) {\r\n            if (toString(filterData)) {\r\n                setFilteredArr([\r\n                    ...store.filter((contact => {\r\n                        return contact.name.indexOf(filterData) > -1;\r\n                    }))\r\n                ])\r\n            };\r\n            if (parseInt(filterData)) {\r\n                setFilteredArr([\r\n                    ...store.filter((contact => {\r\n                        return contact.number.indexOf(filterData) > -1;\r\n                    }))\r\n                ])\r\n            };\r\n\r\n        } else {\r\n            setFilteredArr([]);\r\n        }\r\n    }, [filterData, store])\r\n\r\n\r\n    useEffect(() => {\r\n        if (filteredArr.length !== 0) {\r\n            setShoList(false);\r\n            setShowFilteredList(true);\r\n        } else {\r\n            setShowFilteredList(false);\r\n            setShoList(true);\r\n        }\r\n    }, [filteredArr.length])\r\n\r\n\r\n    useEffect(() => {\r\n        if (dataToDelete) {\r\n            dispatch(delContact(dataToDelete));\r\n        }\r\n    }, [dataToDelete, dispatch])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ContactListSection>\r\n                {showList && store.map((contactItem) => (\r\n                    <ContactListView key={contactItem.id} data={contactItem} onDelete={onDeleteHeandler} />\r\n                ))}\r\n                {showFilteredList && filteredArr.map((contactItem) => (\r\n                    <ContactListView key={contactItem.id} data={contactItem} onDelete={onDeleteHeandler} />\r\n                ))}\r\n            </ContactListSection>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\n\nfunction App() {\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\"\nimport store from \"redux/store/store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}